extends layout.jade
block append stylesheets
  link(rel='stylesheet' defer, href='/stylesheets/bootstrap-grid.css')
  link(rel='stylesheet' defer, href='/stylesheets/bootstrap-reboot.css')
  link(rel='stylesheet' defer, href='/stylesheets/projectBoxes.css')

block append scripts
  script(async, defer, src='/javascripts/video.js')

//-images should be 700x464 to be the same size
block content
      section.project-page-container
        .row
          .col-lg-4.col-sm-6.portfolio-item
            .card.h-100
              a(href='#').div-img-top
                img.card-img-top(src='/images/handDet.jpg', alt='')
              .card-body
                div.upper-content
                  h4.card-title
                    a(href='#') Hand detection algorithm
                  p.card-text
                    | Detects amount of fingers and position of a hand on a table with an overlay projected by a beamer.
                    | Use cases can be to actively change the projection when a hand points at a specific spot.
                    | General process:
                    | First, the image is iteratively thresholded to reduce the background noise.
                    | Then, the largest item is isolated. The convex hull and convex defects are generated.
                    | From the angles of the fingers, the finger amount and location is determined.
                    | This was particulary challenging due to occlusion and no fixed length and position of the arm attached to the hand.       
                div.lower-content
                  h4.skills-title Specifications
                  ul.skills-list
                    li Built in C#
                    li Handles occlusion (by beamer light)
                    li Handles rotation of the hand
                    li No external libraries used
                    li Graded with 8.7/10    
                <button class ="btn-box" onclick="window.open('https://github.com/AmberElferink/ImageProcessing3', '_blank');"><i class="fa fa-github-square"></i> Checkout Github CV </button>
        
          .col-lg-4.col-sm-6.portfolio-item
            .card.h-100
              a(href='#').div-img-top
                //-iframe(width="700" height="400" src="https://www.youtube.com/embed/xG2lreUPnFQ?controls=0&autoplay=1&mute=1&loop=1&modestbranding=0" frameborder="0").card-img-top
                img.card-img-top(src='/images/RayTracerScreenshot.png', alt='')
              .card-body
                div.upper-content
                  h4.card-title
                    a(href='#') Ray-Tracer
                  p.card-text
                    | A 3D environment that does not have real-time performance as priority, but how physically accurate shadows, lighting and reflections can be rendered. This method is mostly used in rendering software.
                    | It was made from a template where you could color individual pixels on the screen.
                    | From there, a ray was shot from each pixel into a virtual space and the intersection with the closests object and its color is determined. 
                    | From there, further rays can be shot to obtain shadow, reflections and refractions.
                div.lower-content
                  h4.skills-title Specifications
                  ul.skills-list
                    li Built in C#
                    li Features: Glass, mirrors, spotlights, anti-aliasing and triangles.
                    li Graded with a 10/10
                <button class ="btn-box" onclick="window.open('https://github.com/AmberElferink/Raytracer', '_blank');"><i class="fa fa-github-square"></i> Checkout Github CV </button>
 
          .col-lg-4.col-sm-6.portfolio-item
            .card.h-100
              a(href='#').div-img-top
                video(autoplay loop muted playsinline width="100%").card-img-top
                  source(src="/videos/Rasterizer.webm" type="video/webm")
                  source(src="/videos/Rasterizer.mp4" type="video/mp4")
              .card-body
                div.upper-content
                  h4.card-title
                    a(href='#') Rasterization Engine
                  p.card-text
                    | A 3D environment that has real-time performance as priority, however, shadows, lighting and reflections will be less accurate. This method is mostly used in games.
                    | Implemented many basic engine features from a template that could load a basic 3D meshes.
                    | The features implemented are: scenegraph, which enables rotation and translation with respect to parent objects and finally transforming to camera space.
                    | This was done with matrix multiplications.
                    | Other implemented features include: Pong shading, texture mapping and normal maps.
                div.lower-content
                  h4.skills-title Specifications
                  ul.skills-list
                    li Built in C# and OpenGL.
                    li Features: Phong shading model, multiple light sources, normal maps and an interactive camera.
                    li Graded with a 9.7/10
                <button class ="btn-box" onclick="window.open('https://github.com/AmberElferink/Rasterizer', '_blank');"><i class="fa fa-github-square"></i> Checkout Github</button>
 
          .col-lg-4.col-sm-6.portfolio-item
            .card.h-100
              a(href='#').div-img-top
                img.card-img-top(src='/images/Larry.png', alt='')
              .card-body
                div.upper-content
                  h4.card-title
                    a(href='#') Larry the Unsanitary Canary: Dragons Den
                  p.card-text
                    | The game starts when Larry, the trusty steed of the adventures, besmurged the wall of a dragons den. The players are locked into the dragons dungeon. 
                    | Escaping it is their only hope to freedom.
                    | This game was made as a first year introduction project. It was made within two months with a team of seven first year students.
                    | It is a co-op puzzle dungeon crawler, where the players need to find colored keys to unlock doors and each player can only pick up keys of his own color.
                    | Some doors can be opened by levers, which a player can hold down to hold open doors for eachother.
                    | Along the way, players will encounter evil bunnies and pinguins they must defeat.
                div.lower-content
                  h4.skills-title Specifications
                  ul.skills-list
                    li Built in C# and Monogame
                    li Teamleader
                    li Worked mostly on planning, menu's, story art (upper image) and controller input
                    li Personal grade: 8.5/10   
                <button class ="btn-box" onclick="window.open('https://github.com/AmberElferink/LarryDragonsDen', '_blank');"><i class="fa fa-github-square"></i> Checkout Github</button>
            
          .col-lg-4.col-sm-6.portfolio-item
            .card.h-100
              a(href='#').div-img-top
                img.card-img-top(src='/images/fastdining.png', alt='')
              .card-body
                div.upper-content
                  h4.card-title
                    a(href='#') Fast Dining Webshop
                  p.card-text
                    | This is a small web shop made for the web technology course.
                    | The main focus was to create a functioning webshop, with both front- and backend. 
                    | The user can make an account, log in, filter products and buy a product whereafter they can view it in their order history.
                    | This project was mostly focussed on the back-end and less on the responsiveness and looks.
                div.lower-content
                  h4.skills-title Specifications
                  ul.skills-list
                    li Users and products are stored in an SQLite database.
                    li It includes: login (sessions), register, update profile, buying products and order history. 
                    li Made using HTML, CSS, Javascript, NodeJs with ExpressJs and an SQLite database.
                    li Graded with 9.75/10
                <button class ="btn-box" onclick="window.open('https://github.com/AmberElferink/fastdiningshop', '_blank');"><i class="fa fa-github-square"></i> Checkout Github</button>
 
          .col-lg-4.col-sm-6.portfolio-item
            .card.h-100
              a(href='#').div-img-top
                img.card-img-top(src='http://placehold.it/700x400', alt='')
              .card-body
                div.upper-content
                  h4.card-title
                    a(href='#') Portfolio website
                  p.card-text
                    | This project is the website you are currently visiting. 
                    | It is a very basic website, mostly front-end oriented.
                    | I could have gone for an amazing template, but I do not want a designers website.
                    | I am not a designer or front-end developer, but I like to make projects functional.
                    | It is built to be responsive and simple.
                div.lower-content
                  h4.skills-title Specifications
                  ul.skills-list
                    li Built using Jade, CSS, NodeJS and Bootstrap.
                    li Responsive on all device sizes
                <button class ="btn-box" onclick="window.open('https://github.com/AmberElferink/Portfolio', '_blank');"><i class="fa fa-github-square"></i> Checkout Github</button>
 
          .col-lg-4.col-sm-6.portfolio-item
              .card.h-100
                a(href='#').div-img-top
                  video(autoplay loop muted playsinline width="100%").card-img-top
                    source(src="/videos/Asteroids.webm" type="video/webm")
                    source(src="/videos/Asteroids.mp4" type="video/mp4")
                .card-body
                  div.upper-content
                    h4.card-title
                      a(href='#') Asteroids in Haskell
                    p.card-text
                      | This might seem like a very simple game. However, anyone that has programmed in Haskell can confirm it is a very hard language to work with.
                      | Haskell is a functional programming language, which requires entirely different thinking than the usual imperative programming languages.
                      | Everything in this language works recursively, which means every argument which keeps the game running has to be passed along.
                      | The syntax is very compact and abstract and the code is hard to break down into smaller easy pieces.
                      | Debugging can be a pain, since especially for beginners, the stated errors can be very abstract.
                  div.lower-content
                    h4.skills-title Specifications
                    ul.skills-list
                      li Built in Haskell with the Gloss library
                      li The asteroids are parsed from a json file with the aeson, bytestring and text libraries.
                      li Features parallax scrolling.
                      li Basic enemy AI.
                  <button class ="btn-box" onclick="window.open('https://github.com/AmberElferink/AsteroidsInHaskell', '_blank');"><i class="fa fa-github-square"></i> Checkout Github</button>
